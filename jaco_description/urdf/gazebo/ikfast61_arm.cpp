/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 61 generated on 2014-02-11 18:08:32.929940
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==61);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#define IKFAST_STRINGIZE2(s) #s
#define IKFAST_STRINGIZE(s) IKFAST_STRINGIZE2(s)

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)0.000001)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68,x69,x70,x71,x72,x73,x74,x75,x76,x77,x78,x79,x80,x81,x82,x83,x84,x85,x86;
x0=IKcos(j[3]);
x1=IKsin(j[0]);
x2=IKcos(j[0]);
x3=IKcos(j[2]);
x4=IKsin(j[1]);
x5=IKcos(j[1]);
x6=IKsin(j[2]);
x7=IKsin(j[3]);
x8=IKcos(j[4]);
x9=IKsin(j[4]);
x10=IKcos(j[5]);
x11=IKsin(j[5]);
x12=((IkReal(0.573576689470092))*(x8));
x13=((IkReal(0.0692600000000000))*(x2));
x14=((IkReal(0.0692600000000000))*(x5));
x15=((IkReal(0.372551457239321))*(x2));
x16=((IkReal(0.186171069783844))*(x8));
x17=((IkReal(0.469846416077544))*(x0));
x18=((IkReal(0.328990218703470))*(x4));
x19=((IkReal(0.819151867053070))*(x4));
x20=((IkReal(0.469846416077544))*(x7));
x21=((IkReal(0.819151867053070))*(x9));
x22=((IkReal(0.186171069783844))*(x9));
x23=((IkReal(1.00000000000000))*(x7));
x24=((IkReal(0.410000000000000))*(x5));
x25=((IkReal(1.06978384366929e-6))*(x7));
x26=((IkReal(0.671009781296530))*(x7));
x27=((IkReal(0.469846416077544))*(x4));
x28=((IkReal(1.00000000000000))*(x5));
x29=((IkReal(0.819151867053070))*(x8));
x30=((IkReal(0.573576689470092))*(x7));
x31=((IkReal(0.106784637389038))*(x7));
x32=((IkReal(0.573576689470092))*(x9));
x33=((x0)*(x9));
x34=((x4)*(x6));
x35=((IkReal(-0.573576689470092))*(x8));
x36=((x1)*(x3));
x37=((x5)*(x6));
x38=((x0)*(x2));
x39=((x0)*(x1));
x40=((x2)*(x3));
x41=((x3)*(x4));
x42=((x3)*(x5));
x43=((IkReal(0.671009781296530))*(x39));
x44=((IkReal(0.573576689470092))*(x39));
x45=((x2)*(x23));
x46=((x28)*(x6));
x47=((IkReal(0.469846416077544))*(x42));
x48=((x27)*(x6));
x49=((IkReal(0.469846416077544))*(x2)*(x37));
x50=((x19)*(x40));
x51=((x19)*(x36));
x52=((((x19)*(x3)))+(((IkReal(-0.819151867053070))*(x37))));
x53=((((IkReal(-1.00000000000000))*(x41)))+(x46));
x54=((((IkReal(0.573576689470092))*(x37)))+(((IkReal(-0.573576689470092))*(x41))));
x55=((x48)+(x47));
x56=((x54)*(x7));
x57=((x52)*(x7));
x58=((((x2)*(x34)))+(((x40)*(x5))));
x59=((((x36)*(x5)))+(((x1)*(x34))));
x60=((((IkReal(-1.00000000000000))*(x2)*(x34)))+(((IkReal(-1.00000000000000))*(x28)*(x40))));
x61=((((IkReal(-1.00000000000000))*(x1)*(x34)))+(((IkReal(-1.00000000000000))*(x28)*(x36))));
x62=((x0)*(x59));
x63=((x0)*(x58));
x64=((x61)*(x7));
x65=((x60)*(x7));
x66=((x26)*(x60));
x67=((x30)*(x60));
x68=((x30)*(x61));
x69=((((x1)*(x7)))+(x63));
x70=((x45)+(((IkReal(-1.00000000000000))*(x62))));
x71=((((IkReal(-1.00000000000000))*(x1)*(x23)))+(((IkReal(-1.00000000000000))*(x63))));
x72=((((IkReal(-1.00000000000000))*(x19)*(x6)))+(x56)+(((IkReal(-0.819151867053070))*(x42))));
x73=((x69)*(x8));
x74=((x71)*(x9));
x75=((((x26)*(x61)))+(((IkReal(0.469846416077544))*(x1)*(x37))));
x76=((x51)+(x68));
x77=((x49)+(x43)+(x66));
x78=((x44)+(x50)+(x67));
x79=((((x72)*(x9)))+(((x0)*(x8)*(((((IkReal(-1.00000000000000))*(x46)))+(x41))))));
x80=((x78)+(((IkReal(-0.819151867053070))*(x2)*(x37))));
x81=((x78)+(((IkReal(-0.819151867053070))*(x2)*(x37))));
x82=((((IkReal(-0.819151867053070))*(x1)*(x37)))+(((IkReal(-0.573576689470092))*(x38)))+(x76));
x83=((x8)*(x80));
x84=((x80)*(x9));
x85=((((x82)*(x9)))+(((x8)*(((((IkReal(-1.00000000000000))*(x45)))+(x62))))));
x86=((((x32)*(x70)))+(((x27)*(x36)))+(((IkReal(0.671009781296530))*(x38)))+(((x12)*(x82))));
eerot[0]=((((x11)*(((((x35)*(x80)))+(x77)+(((IkReal(-0.573576689470092))*(x74)))+(((IkReal(-0.469846416077544))*(x4)*(x40)))))))+(((x10)*(((((IkReal(-1.00000000000000))*(x84)))+(((IkReal(-1.00000000000000))*(x73))))))));
eerot[1]=((((x10)*(((((x32)*(x71)))+(((x27)*(x40)))+(((x12)*(x80)))+(((IkReal(-1.00000000000000))*(x77)))))))+(((x11)*(((((IkReal(-1.00000000000000))*(x84)))+(((IkReal(-1.00000000000000))*(x73))))))));
eerot[2]=((((x21)*(x71)))+(((x29)*(x81)))+(((x20)*(x60)))+(((IkReal(-1.00000000000000))*(x18)*(x40)))+(((IkReal(0.328990218703470))*(x2)*(x37)))+(((x1)*(x17))));
IkReal x87=((IkReal(1.00000000000000))*(x13));
eetrans[0]=((((IkReal(-1.00000000000000))*(x15)*(x41)))+(((x8)*(((((IkReal(-8.76315432884912e-7))*(x4)*(x40)))+(((IkReal(8.76315432884912e-7))*(x2)*(x37)))+(((IkReal(-6.13603075500424e-7))*(x65)))+(((IkReal(-6.13603075500424e-7))*(x39)))))))+(((x16)*(x81)))+(((x9)*(((((x1)*(x25)))+(((IkReal(1.06978384366929e-6))*(x63)))))))+(((x15)*(x37)))+(((IkReal(0.0120000000000000))*(x1)))+(((x7)*(((((IkReal(-1.00000000000000))*(x34)*(x87)))+(((IkReal(-1.00000000000000))*(x42)*(x87)))))))+(((x31)*(x60)))+(((x2)*(x24)))+(((IkReal(0.176044637389038))*(x39)))+(((x22)*(x71))));
eerot[3]=((((x10)*(x85)))+(((x11)*(((x86)+(((IkReal(-1.00000000000000))*(x75))))))));
eerot[4]=((((x11)*(x85)))+(((x10)*(((x75)+(((IkReal(-1.00000000000000))*(x86))))))));
eerot[5]=((((IkReal(-0.328990218703470))*(x1)*(x37)))+(((x18)*(x36)))+(((IkReal(-1.00000000000000))*(x20)*(x61)))+(((IkReal(-1.00000000000000))*(x29)*(x82)))+(((IkReal(-1.00000000000000))*(x21)*(x70)))+(((x17)*(x2))));
IkReal x88=((x1)*(x37));
IkReal x89=((x36)*(x4));
eetrans[1]=((((IkReal(0.372551457239321))*(x89)))+(((IkReal(-1.00000000000000))*(x1)*(x24)))+(((x9)*(((((x2)*(x25)))+(((IkReal(-1.06978384366929e-6))*(x62)))))))+(((IkReal(0.0120000000000000))*(x2)))+(((IkReal(-1.00000000000000))*(x31)*(x61)))+(((IkReal(-0.372551457239321))*(x88)))+(((IkReal(0.176044637389038))*(x38)))+(((IkReal(-1.00000000000000))*(x22)*(x70)))+(((IkReal(-1.00000000000000))*(x16)*(((((IkReal(-0.819151867053070))*(x88)))+(((IkReal(-0.573576689470092))*(x38)))+(x76)))))+(((x8)*(((((IkReal(-8.76315432884912e-7))*(x88)))+(((IkReal(-6.13603075500424e-7))*(x38)))+(((IkReal(6.13603075500424e-7))*(x64)))+(((IkReal(8.76315432884912e-7))*(x89)))))))+(((x7)*(((((x14)*(x36)))+(((IkReal(0.0692600000000000))*(x1)*(x34))))))));
eerot[6]=((((x11)*(((((IkReal(0.819151867053070))*(x57)))+(((x12)*(x72)))+(((x0)*(x32)*(x53)))+(((IkReal(-1.00000000000000))*(x55)))))))+(((x10)*(x79))));
eerot[7]=((((x10)*(((((IkReal(-0.573576689470092))*(x33)*(x53)))+(x55)+(((x35)*(x72)))+(((IkReal(-0.819151867053070))*(x57)))))))+(((x11)*(x79))));
eerot[8]=((((IkReal(-1.00000000000000))*(x18)*(x6)))+(((IkReal(-1.00000000000000))*(x0)*(x21)*(x53)))+(((IkReal(-0.328990218703470))*(x42)))+(((x30)*(x52)))+(((IkReal(-1.00000000000000))*(x29)*(x72))));
eetrans[2]=((IkReal(0.272500000000000))+(((x7)*(((((IkReal(-1.25150731567958e-6))*(x37)))+(((IkReal(1.25150731567958e-6))*(x41)))))))+(((IkReal(0.130358472191341))*(x57)))+(((IkReal(-1.00000000000000))*(x0)*(x22)*(x53)))+(((x7)*(((((IkReal(-1.00000000000000))*(x14)*(x6)))+(((IkReal(0.0692600000000000))*(x41)))))))+(((IkReal(-1.00000000000000))*(x16)*(((x56)+(((IkReal(-0.819151867053070))*(x42)))+(((IkReal(-0.819151867053070))*(x34)))))))+(((IkReal(-0.372551457239321))*(x42)))+(((IkReal(-0.372551457239321))*(x34)))+(((x33)*(((((IkReal(-1.06978384366929e-6))*(x41)))+(((IkReal(1.06978384366929e-6))*(x37)))))))+(((IkReal(-0.410000000000000))*(x4)))+(((x8)*(((((IkReal(-8.76315432884912e-7))*(x42)))+(((x25)*(x54)))+(((IkReal(-8.76315432884912e-7))*(x34))))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((IkReal(-1.00000000000000))*(r00));
new_r01=r01;
new_r02=((IkReal(-1.00000000000000))*(r02));
new_px=((((IkReal(-0.227272960328591))*(r02)))+(px));
new_r10=r10;
new_r11=((IkReal(-1.00000000000000))*(r11));
new_r12=r12;
new_py=((((IkReal(-1.00000000000000))*(py)))+(((IkReal(0.227272960328591))*(r12))));
new_r20=r20;
new_r21=((IkReal(-1.00000000000000))*(r21));
new_r22=r22;
new_pz=((IkReal(0.272500000000000))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(0.227272960328591))*(r22))));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
pp=(((px)*(px))+((py)*(py))+((pz)*(pz)));
npx=((((px)*(r00)))+(((py)*(r10)))+(((pz)*(r20))));
npy=((((px)*(r01)))+(((py)*(r11)))+(((pz)*(r21))));
npz=((((px)*(r02)))+(((py)*(r12)))+(((pz)*(r22))));
rxp0_0=((((IkReal(-1.00000000000000))*(py)*(r20)))+(((pz)*(r10))));
rxp0_1=((((px)*(r20)))+(((IkReal(-1.00000000000000))*(pz)*(r00))));
rxp0_2=((((IkReal(-1.00000000000000))*(px)*(r10)))+(((py)*(r00))));
rxp1_0=((((IkReal(-1.00000000000000))*(py)*(r21)))+(((pz)*(r11))));
rxp1_1=((((px)*(r21)))+(((IkReal(-1.00000000000000))*(pz)*(r01))));
rxp1_2=((((IkReal(-1.00000000000000))*(px)*(r11)))+(((py)*(r01))));
rxp2_0=((((IkReal(-1.00000000000000))*(py)*(r22)))+(((pz)*(r12))));
rxp2_1=((((px)*(r22)))+(((IkReal(-1.00000000000000))*(pz)*(r02))));
rxp2_2=((((IkReal(-1.00000000000000))*(px)*(r12)))+(((py)*(r02))));
{
IkReal j5array[0], cj5array[0], sj5array[0];
bool j5valid[0]={false};
_nj5 = 0;
for(int ij5 = 0; ij5 < 0; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 0; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x90=IKcos(j4);
IkReal x91=((cj5)*(r21));
IkReal x92=((r20)*(sj5));
IkReal x93=((IkReal(0.285670739590656))*(x90));
sj1array[0]=((((x92)*(x93)))+(((IkReal(0.454597568858948))*(x92)))+(((IkReal(0.454597568858948))*(x91)))+(((IkReal(-0.407979829016951))*(r22)*(x90)))+(((IkReal(2.43902439024390))*(pz)))+(((IkReal(0.318312853909878))*(r22)))+(((x91)*(x93))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
IkReal dummyeval[1];
IkReal gconst48;
IkReal x94=(cj1)*(cj1);
IkReal x95=((r02)*(r10));
IkReal x96=((r00)*(r12));
IkReal x97=((IkReal(0.168100000000000))*(x94));
gconst48=IKsign(((((IkReal(-0.000144000000000000))*(x96)))+(((IkReal(0.000144000000000000))*(x95)))+(((x95)*(x97)))+(((IkReal(-1.00000000000000))*(x96)*(x97)))));
IkReal x98=(cj1)*(cj1);
IkReal x99=((r00)*(r12));
IkReal x100=((r02)*(r10));
IkReal x101=((IkReal(1167.36111111111))*(x98));
dummyeval[0]=((x100)+(((IkReal(-1.00000000000000))*(x101)*(x99)))+(((IkReal(-1.00000000000000))*(x99)))+(((x100)*(x101))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst49;
IkReal x102=(cj1)*(cj1);
IkReal x103=((r01)*(r12));
IkReal x104=((r02)*(r11));
IkReal x105=((IkReal(0.168100000000000))*(x102));
gconst49=IKsign(((((IkReal(-0.000144000000000000))*(x103)))+(((IkReal(0.000144000000000000))*(x104)))+(((IkReal(-1.00000000000000))*(x103)*(x105)))+(((x104)*(x105)))));
IkReal x106=(cj1)*(cj1);
IkReal x107=((r02)*(r11));
IkReal x108=((r01)*(r12));
IkReal x109=((IkReal(1167.36111111111))*(x106));
dummyeval[0]=((((x107)*(x109)))+(x107)+(((IkReal(-1.00000000000000))*(x108)*(x109)))+(((IkReal(-1.00000000000000))*(x108))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x110=IKcos(j4);
IkReal x111=((cj5)*(r02));
IkReal x112=((npz)*(r01));
IkReal x113=((r11)*(r22));
IkReal x114=((IkReal(0.410000000000000))*(cj1));
IkReal x115=((IkReal(0.0535083907422505))*(cj1));
IkReal x116=((npz)*(r11));
IkReal x117=((IkReal(0.0764178513251892))*(cj1));
IkReal x118=((npy)*(r12));
IkReal x119=((cj5)*(r12));
IkReal x120=((IkReal(0.00492000000000000))*(sj1));
IkReal x121=((r01)*(r22));
IkReal x122=((npy)*(r02));
IkReal x123=((r21)*(x120));
IkReal x124=((IkReal(0.00140550003878603))*(x110));
IkReal x125=((IkReal(0.00200726075876340))*(x110));
IkReal x126=((IkReal(0.168100000000000))*(cj1)*(sj1));
IkReal x127=((cj1)*(x110));
if( IKabs(((gconst49)*(((((IkReal(-1.00000000000000))*(x119)*(x124)))+(((IkReal(-1.00000000000000))*(x113)*(x120)))+(((IkReal(0.0685814092577495))*(r01)*(x127)))+(((IkReal(-1.00000000000000))*(r02)*(r21)*(x126)))+(((IkReal(-1.00000000000000))*(x112)*(x114)))+(((IkReal(0.0480212513251892))*(x111)*(x127)))+(((x121)*(x126)))+(((x111)*(x117)))+(((IkReal(-0.0120000000000000))*(x118)))+(((IkReal(-1.00000000000000))*(r01)*(x115)))+(((IkReal(-1.00000000000000))*(r11)*(x125)))+(((x114)*(x122)))+(((r12)*(x123)))+(((IkReal(0.0120000000000000))*(x116)))+(((IkReal(0.00156609924123660))*(r11)))+(((IkReal(-0.00223662003878603))*(x119))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst49)*(((((IkReal(-1.00000000000000))*(x113)*(x126)))+(((IkReal(-1.00000000000000))*(x120)*(x121)))+(((IkReal(-0.0480212513251892))*(x119)*(x127)))+(((IkReal(-0.0685814092577495))*(r11)*(x127)))+(((IkReal(-1.00000000000000))*(x117)*(x119)))+(((r02)*(x123)))+(((x114)*(x116)))+(((IkReal(-0.0120000000000000))*(x122)))+(((IkReal(-1.00000000000000))*(x111)*(x124)))+(((IkReal(-1.00000000000000))*(x114)*(x118)))+(((r11)*(x115)))+(((r12)*(r21)*(x126)))+(((IkReal(0.0120000000000000))*(x112)))+(((IkReal(-0.00223662003878603))*(x111)))+(((IkReal(0.00156609924123660))*(r01)))+(((IkReal(-1.00000000000000))*(r01)*(x125))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst49)*(((((IkReal(-1.00000000000000))*(x119)*(x124)))+(((IkReal(-1.00000000000000))*(x113)*(x120)))+(((IkReal(0.0685814092577495))*(r01)*(x127)))+(((IkReal(-1.00000000000000))*(r02)*(r21)*(x126)))+(((IkReal(-1.00000000000000))*(x112)*(x114)))+(((IkReal(0.0480212513251892))*(x111)*(x127)))+(((x121)*(x126)))+(((x111)*(x117)))+(((IkReal(-0.0120000000000000))*(x118)))+(((IkReal(-1.00000000000000))*(r01)*(x115)))+(((IkReal(-1.00000000000000))*(r11)*(x125)))+(((x114)*(x122)))+(((r12)*(x123)))+(((IkReal(0.0120000000000000))*(x116)))+(((IkReal(0.00156609924123660))*(r11)))+(((IkReal(-0.00223662003878603))*(x119)))))), ((gconst49)*(((((IkReal(-1.00000000000000))*(x113)*(x126)))+(((IkReal(-1.00000000000000))*(x120)*(x121)))+(((IkReal(-0.0480212513251892))*(x119)*(x127)))+(((IkReal(-0.0685814092577495))*(r11)*(x127)))+(((IkReal(-1.00000000000000))*(x117)*(x119)))+(((r02)*(x123)))+(((x114)*(x116)))+(((IkReal(-0.0120000000000000))*(x122)))+(((IkReal(-1.00000000000000))*(x111)*(x124)))+(((IkReal(-1.00000000000000))*(x114)*(x118)))+(((r11)*(x115)))+(((r12)*(r21)*(x126)))+(((IkReal(0.0120000000000000))*(x112)))+(((IkReal(-0.00223662003878603))*(x111)))+(((IkReal(0.00156609924123660))*(r01)))+(((IkReal(-1.00000000000000))*(r01)*(x125)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x128=IKcos(j0);
IkReal x129=IKsin(j0);
IkReal x130=IKcos(j4);
IkReal x131=((IkReal(0.410000000000000))*(sj1));
IkReal x132=((IkReal(0.130508270103050))*(r12));
IkReal x133=((IkReal(0.410000000000000))*(cj1));
IkReal x134=((IkReal(0.186385003232169))*(cj5));
IkReal x135=((IkReal(0.186385003232169))*(sj5));
IkReal x136=((IkReal(0.130508270103050))*(r02));
IkReal x137=((IkReal(0.820000000000000))*(cj1));
IkReal x138=((r01)*(x128));
IkReal x139=((r11)*(x128));
IkReal x140=((IkReal(0.0120000000000000))*(x129));
IkReal x141=((py)*(x129));
IkReal x142=((r01)*(x129));
IkReal x143=((r10)*(x129));
IkReal x144=((px)*(x129));
IkReal x145=((IkReal(0.0120000000000000))*(x128));
IkReal x146=((r00)*(x128));
IkReal x147=((r11)*(x129));
IkReal x148=((py)*(x128));
IkReal x149=((px)*(x128));
IkReal x150=((r12)*(x129));
IkReal x151=((IkReal(0.167271729896950))*(x130));
IkReal x152=((r00)*(x129));
IkReal x153=((r02)*(x128));
IkReal x154=((IkReal(0.117125003232169))*(cj5)*(x130));
IkReal x155=((IkReal(0.117125003232169))*(sj5)*(x130));
IkReal x156=((x128)*(x155));
evalcond[0]=((IkReal(0.130508270103050))+(((IkReal(-1.00000000000000))*(x151)))+(((IkReal(-1.00000000000000))*(x133)*(x150)))+(((IkReal(-1.00000000000000))*(x133)*(x153)))+(((IkReal(-1.00000000000000))*(r02)*(x140)))+(npz)+(((IkReal(-1.00000000000000))*(r22)*(x131)))+(((r12)*(x145))));
evalcond[1]=((IkReal(-0.116472222004854))+(((IkReal(0.820000000000000))*(pz)*(sj1)))+(((x137)*(x141)))+(((x137)*(x149)))+(((IkReal(0.0416980980048537))*((x130)*(x130))))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(-0.0240000000000000))*(x148)))+(((IkReal(0.0240000000000000))*(x144))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x133)*(x146)))+(((IkReal(-1.00000000000000))*(x133)*(x143)))+(npx)+(x155)+(x135)+(((IkReal(-1.00000000000000))*(r00)*(x140)))+(((r10)*(x145)))+(((IkReal(-1.00000000000000))*(r20)*(x131))));
evalcond[3]=((((IkReal(-1.00000000000000))*(r21)*(x131)))+(((IkReal(-1.00000000000000))*(x133)*(x147)))+(npy)+(((IkReal(-1.00000000000000))*(x133)*(x138)))+(((IkReal(-1.00000000000000))*(r01)*(x140)))+(x154)+(x134)+(((IkReal(0.0120000000000000))*(x139))));
evalcond[4]=((IkReal(0.0120000000000000))+(((x139)*(x154)))+(((IkReal(-1.00000000000000))*(x134)*(x142)))+(((IkReal(-1.00000000000000))*(x142)*(x154)))+(((r10)*(x128)*(x135)))+(x148)+(((IkReal(-1.00000000000000))*(x152)*(x155)))+(((r02)*(x129)*(x151)))+(((x134)*(x139)))+(((IkReal(-1.00000000000000))*(x144)))+(((IkReal(-1.00000000000000))*(r12)*(x128)*(x151)))+(((x128)*(x132)))+(((IkReal(-1.00000000000000))*(x129)*(x136)))+(((r10)*(x156)))+(((IkReal(-1.00000000000000))*(x135)*(x152))));
evalcond[5]=((((x129)*(x132)))+(((IkReal(-1.00000000000000))*(x151)*(x153)))+(((IkReal(-1.00000000000000))*(x150)*(x151)))+(((x135)*(x143)))+(((x135)*(x146)))+(x141)+(x149)+(((x138)*(x154)))+(((IkReal(-1.00000000000000))*(x133)))+(((x134)*(x138)))+(((x146)*(x155)))+(((x134)*(x147)))+(((x147)*(x154)))+(((x128)*(x136)))+(((x143)*(x155))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x480=IKcos(j4);
IkReal x481=((IkReal(0.410000000000000))*(cj1));
IkReal x482=((npz)*(r10));
IkReal x483=((npx)*(r02));
IkReal x484=((r12)*(sj5));
IkReal x485=((r20)*(sj1));
IkReal x486=((IkReal(0.168100000000000))*(cj1));
IkReal x487=((npx)*(r12));
IkReal x488=((r22)*(sj1));
IkReal x489=((IkReal(0.0535083907422505))*(cj1));
IkReal x490=((IkReal(0.0764178513251892))*(cj1));
IkReal x491=((r02)*(sj5));
IkReal x492=((npz)*(r00));
IkReal x493=((cj1)*(x480));
IkReal x494=((IkReal(0.00200726075876340))*(x480));
IkReal x495=((IkReal(0.00140550003878603))*(x480));
if( IKabs(((gconst48)*(((((r00)*(x486)*(x488)))+(((IkReal(0.0685814092577495))*(r00)*(x493)))+(((IkReal(-1.00000000000000))*(r10)*(x494)))+(((IkReal(0.0120000000000000))*(x482)))+(((IkReal(-0.00223662003878603))*(x484)))+(((x490)*(x491)))+(((x481)*(x483)))+(((IkReal(-1.00000000000000))*(x481)*(x492)))+(((IkReal(0.00492000000000000))*(r12)*(x485)))+(((IkReal(-1.00000000000000))*(x484)*(x495)))+(((IkReal(-0.0120000000000000))*(x487)))+(((IkReal(0.00156609924123660))*(r10)))+(((IkReal(0.0480212513251892))*(x491)*(x493)))+(((IkReal(-0.00492000000000000))*(r10)*(x488)))+(((IkReal(-1.00000000000000))*(r00)*(x489)))+(((IkReal(-1.00000000000000))*(r02)*(x485)*(x486))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst48)*(((((IkReal(-0.00223662003878603))*(x491)))+(((IkReal(-1.00000000000000))*(r00)*(x494)))+(((r12)*(x485)*(x486)))+(((IkReal(-1.00000000000000))*(x491)*(x495)))+(((IkReal(-0.0480212513251892))*(x484)*(x493)))+(((IkReal(0.0120000000000000))*(x492)))+(((IkReal(-0.0685814092577495))*(r10)*(x493)))+(((IkReal(-1.00000000000000))*(x481)*(x487)))+(((IkReal(-1.00000000000000))*(r10)*(x486)*(x488)))+(((x481)*(x482)))+(((r10)*(x489)))+(((IkReal(-0.00492000000000000))*(r00)*(x488)))+(((IkReal(-1.00000000000000))*(x484)*(x490)))+(((IkReal(0.00492000000000000))*(r02)*(x485)))+(((IkReal(-0.0120000000000000))*(x483)))+(((IkReal(0.00156609924123660))*(r00))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst48)*(((((r00)*(x486)*(x488)))+(((IkReal(0.0685814092577495))*(r00)*(x493)))+(((IkReal(-1.00000000000000))*(r10)*(x494)))+(((IkReal(0.0120000000000000))*(x482)))+(((IkReal(-0.00223662003878603))*(x484)))+(((x490)*(x491)))+(((x481)*(x483)))+(((IkReal(-1.00000000000000))*(x481)*(x492)))+(((IkReal(0.00492000000000000))*(r12)*(x485)))+(((IkReal(-1.00000000000000))*(x484)*(x495)))+(((IkReal(-0.0120000000000000))*(x487)))+(((IkReal(0.00156609924123660))*(r10)))+(((IkReal(0.0480212513251892))*(x491)*(x493)))+(((IkReal(-0.00492000000000000))*(r10)*(x488)))+(((IkReal(-1.00000000000000))*(r00)*(x489)))+(((IkReal(-1.00000000000000))*(r02)*(x485)*(x486)))))), ((gconst48)*(((((IkReal(-0.00223662003878603))*(x491)))+(((IkReal(-1.00000000000000))*(r00)*(x494)))+(((r12)*(x485)*(x486)))+(((IkReal(-1.00000000000000))*(x491)*(x495)))+(((IkReal(-0.0480212513251892))*(x484)*(x493)))+(((IkReal(0.0120000000000000))*(x492)))+(((IkReal(-0.0685814092577495))*(r10)*(x493)))+(((IkReal(-1.00000000000000))*(x481)*(x487)))+(((IkReal(-1.00000000000000))*(r10)*(x486)*(x488)))+(((x481)*(x482)))+(((r10)*(x489)))+(((IkReal(-0.00492000000000000))*(r00)*(x488)))+(((IkReal(-1.00000000000000))*(x484)*(x490)))+(((IkReal(0.00492000000000000))*(r02)*(x485)))+(((IkReal(-0.0120000000000000))*(x483)))+(((IkReal(0.00156609924123660))*(r00)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x496=IKcos(j0);
IkReal x497=IKsin(j0);
IkReal x498=IKcos(j4);
IkReal x499=((IkReal(0.410000000000000))*(sj1));
IkReal x500=((IkReal(0.130508270103050))*(r12));
IkReal x501=((IkReal(0.410000000000000))*(cj1));
IkReal x502=((IkReal(0.186385003232169))*(cj5));
IkReal x503=((IkReal(0.186385003232169))*(sj5));
IkReal x504=((IkReal(0.130508270103050))*(r02));
IkReal x505=((IkReal(0.820000000000000))*(cj1));
IkReal x506=((r01)*(x496));
IkReal x507=((r11)*(x496));
IkReal x508=((IkReal(0.0120000000000000))*(x497));
IkReal x509=((py)*(x497));
IkReal x510=((r01)*(x497));
IkReal x511=((r10)*(x497));
IkReal x512=((px)*(x497));
IkReal x513=((IkReal(0.0120000000000000))*(x496));
IkReal x514=((r00)*(x496));
IkReal x515=((r11)*(x497));
IkReal x516=((py)*(x496));
IkReal x517=((px)*(x496));
IkReal x518=((r12)*(x497));
IkReal x519=((IkReal(0.167271729896950))*(x498));
IkReal x520=((r00)*(x497));
IkReal x521=((r02)*(x496));
IkReal x522=((IkReal(0.117125003232169))*(cj5)*(x498));
IkReal x523=((IkReal(0.117125003232169))*(sj5)*(x498));
IkReal x524=((x496)*(x523));
evalcond[0]=((IkReal(0.130508270103050))+(((IkReal(-1.00000000000000))*(x501)*(x518)))+(npz)+(((IkReal(-1.00000000000000))*(x501)*(x521)))+(((IkReal(-1.00000000000000))*(r22)*(x499)))+(((IkReal(-1.00000000000000))*(x519)))+(((r12)*(x513)))+(((IkReal(-1.00000000000000))*(r02)*(x508))));
evalcond[1]=((IkReal(-0.116472222004854))+(((IkReal(0.0416980980048537))*((x498)*(x498))))+(((IkReal(0.820000000000000))*(pz)*(sj1)))+(((x505)*(x509)))+(((IkReal(-1.00000000000000))*(pp)))+(((x505)*(x517)))+(((IkReal(0.0240000000000000))*(x512)))+(((IkReal(-0.0240000000000000))*(x516))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x501)*(x511)))+(((IkReal(-1.00000000000000))*(x501)*(x514)))+(npx)+(((r10)*(x513)))+(((IkReal(-1.00000000000000))*(r00)*(x508)))+(x503)+(x523)+(((IkReal(-1.00000000000000))*(r20)*(x499))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x501)*(x515)))+(((IkReal(-1.00000000000000))*(r21)*(x499)))+(npy)+(((IkReal(-1.00000000000000))*(x501)*(x506)))+(((IkReal(-1.00000000000000))*(r01)*(x508)))+(x502)+(x522)+(((IkReal(0.0120000000000000))*(x507))));
evalcond[4]=((IkReal(0.0120000000000000))+(((IkReal(-1.00000000000000))*(x502)*(x510)))+(((r02)*(x497)*(x519)))+(((r10)*(x496)*(x503)))+(((IkReal(-1.00000000000000))*(x520)*(x523)))+(((IkReal(-1.00000000000000))*(r12)*(x496)*(x519)))+(((IkReal(-1.00000000000000))*(x497)*(x504)))+(((IkReal(-1.00000000000000))*(x512)))+(((IkReal(-1.00000000000000))*(x503)*(x520)))+(((x496)*(x500)))+(((x507)*(x522)))+(((r10)*(x524)))+(x516)+(((x502)*(x507)))+(((IkReal(-1.00000000000000))*(x510)*(x522))));
evalcond[5]=((((x497)*(x500)))+(((x502)*(x515)))+(((IkReal(-1.00000000000000))*(x501)))+(((x503)*(x514)))+(((x503)*(x511)))+(((x515)*(x522)))+(((IkReal(-1.00000000000000))*(x518)*(x519)))+(((x496)*(x504)))+(x509)+(x517)+(((x514)*(x523)))+(((x502)*(x506)))+(((x506)*(x522)))+(((x511)*(x523)))+(((IkReal(-1.00000000000000))*(x519)*(x521))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}
}
}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x157=((IkReal(0.573576689470092))*(cj5));
IkReal x158=((IkReal(0.573576689470092))*(sj5));
IkReal x159=((IkReal(0.819151867053070))*(cj5));
IkReal x160=((IkReal(1.00000000000000))*(sj0));
IkReal x161=((IkReal(1.00000000000000))*(cj1));
IkReal x162=((IkReal(1.00000000000000))*(sj5));
IkReal x163=((IkReal(0.819151867053070))*(sj5));
IkReal x164=((((cj5)*(r20)))+(((IkReal(-1.00000000000000))*(r21)*(x162))));
IkReal x165=((((cj5)*(r10)))+(((IkReal(-1.00000000000000))*(r11)*(x162))));
IkReal x166=((((IkReal(-1.00000000000000))*(r01)*(x162)))+(((cj5)*(r00))));
IkReal x167=((((IkReal(-0.819151867053070))*(r22)))+(((r20)*(x158)))+(((r21)*(x157))));
IkReal x168=((((IkReal(-0.819151867053070))*(r12)))+(((r11)*(x157)))+(((r10)*(x158))));
IkReal x169=((((IkReal(-0.819151867053070))*(r02)))+(((r00)*(x158)))+(((r01)*(x157))));
IkReal x170=((((r20)*(x163)))+(((IkReal(0.573576689470092))*(r22)))+(((r21)*(x159))));
IkReal x171=((((r10)*(x163)))+(((r11)*(x159)))+(((IkReal(0.573576689470092))*(r12))));
IkReal x172=((((r00)*(x163)))+(((r01)*(x159)))+(((IkReal(0.573576689470092))*(r02))));
IkReal x173=((((cj0)*(x166)))+(((sj0)*(x165))));
IkReal x174=((((cj0)*(x169)))+(((sj0)*(x168))));
IkReal x175=((((cj0)*(x172)))+(((sj0)*(x171))));
new_r00=((((sj1)*(x164)))+(((cj1)*(x173))));
new_r01=((((sj1)*(x173)))+(((IkReal(-1.00000000000000))*(x161)*(x164))));
new_r02=((((cj0)*(x165)))+(((IkReal(-1.00000000000000))*(x160)*(x166))));
new_r10=((((sj1)*(x167)))+(((cj1)*(x174))));
new_r11=((((sj1)*(x174)))+(((IkReal(-1.00000000000000))*(x161)*(x167))));
new_r12=((((cj0)*(x168)))+(((IkReal(-1.00000000000000))*(x160)*(x169))));
new_r20=((((sj1)*(x170)))+(((cj1)*(x175))));
new_r21=((((sj1)*(x175)))+(((IkReal(-1.00000000000000))*(x161)*(x170))));
new_r22=((((cj0)*(x171)))+(((IkReal(-1.00000000000000))*(x160)*(x172))));
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
cj3array[0]=((IkReal(1.22077485289454))*(new_r22));
if( cj3array[0] >= -1-IKFAST_SINCOS_THRESH && cj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKacos(cj3array[0]);
    sj3array[0] = IKsin(j3array[0]);
    cj3array[1] = cj3array[0];
    j3array[1] = -j3array[0];
    sj3array[1] = -sj3array[0];
}
else if( isnan(cj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IkReal dummyeval[1];
IkReal gconst52;
gconst52=IKsign(((((IkReal(571258827.000000))*((new_r12)*(new_r12))))+(((IkReal(571258827.000000))*((new_r02)*(new_r02))))));
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst50;
gconst50=IKsign(((IkReal(1.60000000000000e+17))+(((IkReal(3.26336647425416e+17))*((sj3)*(sj3))))));
dummyeval[0]=((IkReal(1.00000000000000))+(((IkReal(2.03960404640885))*((sj3)*(sj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst51;
gconst51=IKsign(((((IkReal(4.86336647425416e+17))*((new_r02)*(new_r02))))+(((IkReal(4.86336647425416e+17))*((new_r12)*(new_r12))))));
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x176=((IkReal(2.78951364198253e+17))*(cj3));
IkReal x177=((IkReal(4.86336647425416e+17))*(sj3));
if( IKabs(((gconst51)*(((((new_r12)*(x177)))+(((IkReal(-1.00000000000000))*(new_r02)*(x176))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst51)*(((((IkReal(-1.00000000000000))*(new_r12)*(x176)))+(((IkReal(-1.00000000000000))*(new_r02)*(x177))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst51)*(((((new_r12)*(x177)))+(((IkReal(-1.00000000000000))*(new_r02)*(x176)))))), ((gconst51)*(((((IkReal(-1.00000000000000))*(new_r12)*(x176)))+(((IkReal(-1.00000000000000))*(new_r02)*(x177)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[7];
IkReal x178=IKsin(j4);
IkReal x179=IKcos(j4);
IkReal x180=((cj3)*(new_r12));
IkReal x181=((IkReal(0.573576689470092))*(cj3));
IkReal x182=((new_r12)*(sj3));
IkReal x183=((IkReal(0.819151867053070))*(new_r22));
IkReal x184=((IkReal(0.819151867053070))*(cj3));
IkReal x185=((IkReal(1.00000000000000))*(x178));
IkReal x186=((new_r02)*(x179));
IkReal x187=((new_r02)*(x178));
IkReal x188=((sj3)*(x179));
IkReal x189=((new_r12)*(x179));
IkReal x190=((IkReal(0.573576689470092))*(x179));
evalcond[0]=((sj3)+(x186)+(((IkReal(-1.00000000000000))*(new_r12)*(x185))));
evalcond[1]=((x187)+(x181)+(x189));
evalcond[2]=((((IkReal(0.819151867053070))*(x187)))+(((IkReal(0.819151867053070))*(x189)))+(((IkReal(0.573576689470092))*(new_r22))));
evalcond[3]=((((sj3)*(x183)))+(((IkReal(-0.573576689470092))*(sj3)*(x187)))+(((IkReal(-1.00000000000000))*(x180)*(x185)))+(((cj3)*(x186)))+(((IkReal(-1.00000000000000))*(x182)*(x190))));
evalcond[4]=((((new_r00)*(x188)))+(((IkReal(-1.00000000000000))*(new_r20)*(x184)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj3)*(x185)))+(((new_r10)*(x179)*(x181)))+(((new_r00)*(x178)*(x181))));
evalcond[5]=((((new_r01)*(x178)*(x181)))+(((new_r01)*(x188)))+(((IkReal(-1.00000000000000))*(new_r21)*(x184)))+(((new_r11)*(x179)*(x181)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj3)*(x185))));
evalcond[6]=((IkReal(1.00000000000000))+(((sj3)*(x186)))+(((x180)*(x190)))+(((IkReal(-1.00000000000000))*(x182)*(x185)))+(((IkReal(-1.00000000000000))*(cj3)*(x183)))+(((x181)*(x187))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst53;
gconst53=IKsign(cj3);
dummyeval[0]=cj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj3;
dummyeval[1]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
IkReal x191=((IkReal(1.00000000000000))*(sj4));
IkReal x192=((new_r02)*(sj4));
IkReal x193=((cj4)*(new_r12));
IkReal x194=((((cj4)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(x191))));
IkReal x195=((((cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(x191))));
IkReal x196=((IkReal(1.00000000000000))+(((cj4)*(new_r02)))+(((IkReal(-1.00000000000000))*(new_r12)*(x191))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=x196;
evalcond[3]=((x193)+(x192));
evalcond[4]=x194;
evalcond[5]=x195;
evalcond[6]=((((IkReal(0.819151867053070))*(x193)))+(((IkReal(0.819151867053070))*(x192)))+(((IkReal(0.573576689470092))*(new_r22))));
evalcond[7]=((((IkReal(0.819151867053070))*(new_r22)))+(((IkReal(-0.573576689470092))*(x193)))+(((IkReal(-0.573576689470092))*(x192))));
evalcond[8]=x194;
evalcond[9]=x195;
evalcond[10]=x196;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((((IkReal(-0.573576689470092))*(new_r20)))+(((IkReal(0.819151867053070))*(new_r21))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(0.819151867053070))*(new_r20)))+(((IkReal(0.573576689470092))*(new_r21))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-0.573576689470092))*(new_r20)))+(((IkReal(0.819151867053070))*(new_r21)))))+IKsqr(((((IkReal(0.819151867053070))*(new_r20)))+(((IkReal(0.573576689470092))*(new_r21)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((IkReal(-0.573576689470092))*(new_r20)))+(((IkReal(0.819151867053070))*(new_r21)))), ((((IkReal(0.819151867053070))*(new_r20)))+(((IkReal(0.573576689470092))*(new_r21)))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x197=IKcos(j2);
IkReal x198=IKsin(j2);
IkReal x199=((cj4)*(new_r11));
IkReal x200=((cj4)*(new_r10));
IkReal x201=((new_r01)*(sj4));
IkReal x202=((new_r00)*(sj4));
IkReal x203=((IkReal(0.573576689470092))*(x197));
IkReal x204=((IkReal(0.819151867053070))*(x198));
IkReal x205=((IkReal(0.573576689470092))*(x198));
IkReal x206=((IkReal(0.819151867053070))*(x197));
IkReal x207=((IkReal(1.00000000000000))*(x197));
IkReal x208=((x204)+(x203));
evalcond[0]=((((IkReal(-1.00000000000000))*(x206)))+(x205)+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x208)))+(new_r21));
evalcond[2]=((x198)+(((IkReal(0.819151867053070))*(x202)))+(((IkReal(0.819151867053070))*(x200)))+(((IkReal(0.573576689470092))*(new_r20))));
evalcond[3]=((x202)+(x200)+(x208));
evalcond[4]=((x199)+(((IkReal(-1.00000000000000))*(x206)))+(x205)+(x201));
evalcond[5]=((((IkReal(0.819151867053070))*(x201)))+(((IkReal(-1.00000000000000))*(x207)))+(((IkReal(0.819151867053070))*(x199)))+(((IkReal(0.573576689470092))*(new_r21))));
evalcond[6]=((((IkReal(-1.00000000000000))*(x207)))+(((IkReal(0.819151867053070))*(new_r20)))+(((IkReal(-0.573576689470092))*(x202)))+(((IkReal(-0.573576689470092))*(x200))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x198)))+(((IkReal(0.819151867053070))*(new_r21)))+(((IkReal(-0.573576689470092))*(x201)))+(((IkReal(-0.573576689470092))*(x199))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x209=((cj4)*(new_r00));
IkReal x210=((cj4)*(new_r01));
IkReal x211=((cj4)*(new_r02));
IkReal x212=((IkReal(1.00000000000000))*(sj4));
IkReal x213=((new_r02)*(sj4));
IkReal x214=((cj4)*(new_r12));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r12)*(x212)))+(x211));
evalcond[3]=((x213)+(x214));
evalcond[4]=((((IkReal(-1.00000000000000))*(new_r10)*(x212)))+(x209));
evalcond[5]=((((IkReal(-1.00000000000000))*(new_r11)*(x212)))+(x210));
evalcond[6]=((((IkReal(0.573576689470092))*(new_r22)))+(((IkReal(0.819151867053070))*(x213)))+(((IkReal(0.819151867053070))*(x214))));
evalcond[7]=((((IkReal(-0.819151867053070))*(new_r22)))+(((IkReal(0.573576689470092))*(x214)))+(((IkReal(0.573576689470092))*(x213))));
evalcond[8]=((((new_r10)*(sj4)))+(((IkReal(-1.00000000000000))*(x209))));
evalcond[9]=((((new_r11)*(sj4)))+(((IkReal(-1.00000000000000))*(x210))));
evalcond[10]=((IkReal(1.00000000000000))+(((new_r12)*(sj4)))+(((IkReal(-1.00000000000000))*(x211))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((((IkReal(-0.573576689470092))*(new_r20)))+(((IkReal(-0.819151867053070))*(new_r21))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-0.819151867053070))*(new_r20)))+(((IkReal(0.573576689470092))*(new_r21))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-0.573576689470092))*(new_r20)))+(((IkReal(-0.819151867053070))*(new_r21)))))+IKsqr(((((IkReal(-0.819151867053070))*(new_r20)))+(((IkReal(0.573576689470092))*(new_r21)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((IkReal(-0.573576689470092))*(new_r20)))+(((IkReal(-0.819151867053070))*(new_r21)))), ((((IkReal(-0.819151867053070))*(new_r20)))+(((IkReal(0.573576689470092))*(new_r21)))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x215=IKsin(j2);
IkReal x216=IKcos(j2);
IkReal x217=((cj4)*(new_r11));
IkReal x218=((cj4)*(new_r10));
IkReal x219=((new_r01)*(sj4));
IkReal x220=((new_r00)*(sj4));
IkReal x221=((IkReal(0.819151867053070))*(x215));
IkReal x222=((IkReal(0.573576689470092))*(x216));
IkReal x223=((IkReal(0.819151867053070))*(x216));
IkReal x224=((IkReal(0.573576689470092))*(x215));
IkReal x225=((IkReal(1.00000000000000))*(x216));
IkReal x226=((x223)+(x224));
evalcond[0]=((x226)+(new_r20));
evalcond[1]=((x221)+(new_r21)+(((IkReal(-1.00000000000000))*(x222))));
evalcond[2]=((x215)+(((IkReal(0.573576689470092))*(new_r20)))+(((IkReal(0.819151867053070))*(x220)))+(((IkReal(0.819151867053070))*(x218))));
evalcond[3]=((x218)+(x221)+(x220)+(((IkReal(-1.00000000000000))*(x222))));
evalcond[4]=((x217)+(x219)+(((IkReal(-1.00000000000000))*(x226))));
evalcond[5]=((((IkReal(0.573576689470092))*(new_r21)))+(((IkReal(0.819151867053070))*(x219)))+(((IkReal(0.819151867053070))*(x217)))+(((IkReal(-1.00000000000000))*(x225))));
evalcond[6]=((((IkReal(-0.819151867053070))*(new_r20)))+(((IkReal(0.573576689470092))*(x218)))+(((IkReal(0.573576689470092))*(x220)))+(((IkReal(-1.00000000000000))*(x225))));
evalcond[7]=((((IkReal(-0.819151867053070))*(new_r21)))+(((IkReal(0.573576689470092))*(x217)))+(((IkReal(0.573576689470092))*(x219)))+(((IkReal(-1.00000000000000))*(x215))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x227=((IkReal(0.573576689470092))*(cj4));
IkReal x228=((IkReal(0.573576689470092))*(sj4));
IkReal x229=((new_r02)*(sj4));
IkReal x230=((cj4)*(new_r12));
IkReal x231=((((cj4)*(new_r02)))+(((IkReal(-1.00000000000000))*(new_r12)*(sj4))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.819151867053070))+(new_r22));
evalcond[2]=x231;
evalcond[3]=((IkReal(0.573576689470092))+(x229)+(x230));
evalcond[4]=((((IkReal(0.819151867053070))*(x230)))+(((IkReal(0.573576689470092))*(new_r22)))+(((IkReal(0.819151867053070))*(x229))));
evalcond[5]=x231;
evalcond[6]=((((new_r00)*(x228)))+(((IkReal(-0.819151867053070))*(new_r20)))+(((new_r10)*(x227))));
evalcond[7]=((((new_r01)*(x228)))+(((IkReal(-0.819151867053070))*(new_r21)))+(((new_r11)*(x227))));
evalcond[8]=((IkReal(1.00000000000000))+(((new_r02)*(x228)))+(((IkReal(-0.819151867053070))*(new_r22)))+(((new_r12)*(x227))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((IkReal(-1.74344602623908))*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(1.74344602623908))*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.74344602623908))*(new_r20)))+IKsqr(((IkReal(1.74344602623908))*(new_r21)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((IkReal(-1.74344602623908))*(new_r20)), ((IkReal(1.74344602623908))*(new_r21)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x232=IKsin(j2);
IkReal x233=IKcos(j2);
IkReal x234=((cj4)*(new_r10));
IkReal x235=((cj4)*(new_r11));
IkReal x236=((new_r00)*(sj4));
IkReal x237=((IkReal(1.00000000000000))*(sj4));
IkReal x238=((new_r01)*(sj4));
IkReal x239=((IkReal(1.00000000000000))*(x233));
evalcond[0]=((((cj4)*(new_r00)))+(((IkReal(-1.00000000000000))*(x239)))+(((IkReal(-1.00000000000000))*(new_r10)*(x237))));
evalcond[1]=((((cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(x232)))+(((IkReal(-1.00000000000000))*(new_r11)*(x237))));
evalcond[2]=((((IkReal(0.573576689470092))*(x232)))+(new_r20));
evalcond[3]=((((IkReal(-0.573576689470092))*(x233)))+(new_r21));
evalcond[4]=((x232)+(((IkReal(0.819151867053070))*(x234)))+(((IkReal(0.819151867053070))*(x236)))+(((IkReal(0.573576689470092))*(new_r20))));
evalcond[5]=((x236)+(x234)+(((IkReal(0.819151867053070))*(x232))));
evalcond[6]=((((IkReal(-0.819151867053070))*(x233)))+(x238)+(x235));
evalcond[7]=((((IkReal(-1.00000000000000))*(x239)))+(((IkReal(0.819151867053070))*(x238)))+(((IkReal(0.819151867053070))*(x235)))+(((IkReal(0.573576689470092))*(new_r21))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x240=((IkReal(0.573576689470092))*(cj4));
IkReal x241=((cj4)*(new_r02));
IkReal x242=((new_r12)*(sj4));
IkReal x243=((IkReal(0.573576689470092))*(sj4));
IkReal x244=((new_r02)*(sj4));
IkReal x245=((cj4)*(new_r12));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.819151867053070))+(new_r22));
evalcond[2]=((((IkReal(-1.00000000000000))*(x242)))+(x241));
evalcond[3]=((IkReal(-0.573576689470092))+(x245)+(x244));
evalcond[4]=((((IkReal(0.819151867053070))*(x245)))+(((IkReal(0.819151867053070))*(x244)))+(((IkReal(0.573576689470092))*(new_r22))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x241)))+(x242));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r00)*(x243)))+(((IkReal(0.819151867053070))*(new_r20)))+(((IkReal(-1.00000000000000))*(new_r10)*(x240))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r01)*(x243)))+(((IkReal(0.819151867053070))*(new_r21)))+(((IkReal(-1.00000000000000))*(new_r11)*(x240))));
evalcond[8]=((IkReal(1.00000000000000))+(((IkReal(0.819151867053070))*(new_r22)))+(((IkReal(-1.00000000000000))*(new_r12)*(x240)))+(((IkReal(-1.00000000000000))*(new_r02)*(x243))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((IkReal(-1.74344602623908))*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(1.74344602623908))*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.74344602623908))*(new_r20)))+IKsqr(((IkReal(1.74344602623908))*(new_r21)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((IkReal(-1.74344602623908))*(new_r20)), ((IkReal(1.74344602623908))*(new_r21)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x246=IKsin(j2);
IkReal x247=IKcos(j2);
IkReal x248=((IkReal(0.819151867053070))*(cj4));
IkReal x249=((new_r00)*(sj4));
IkReal x250=((IkReal(1.00000000000000))*(sj4));
IkReal x251=((new_r01)*(sj4));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r10)*(x250)))+(((cj4)*(new_r00)))+(x247));
evalcond[1]=((((cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(x250)))+(x246));
evalcond[2]=((((IkReal(0.573576689470092))*(x246)))+(new_r20));
evalcond[3]=((((IkReal(-0.573576689470092))*(x247)))+(new_r21));
evalcond[4]=((((IkReal(0.819151867053070))*(x249)))+(x246)+(((IkReal(0.573576689470092))*(new_r20)))+(((new_r10)*(x248))));
evalcond[5]=((((IkReal(0.819151867053070))*(x246)))+(((cj4)*(new_r10)))+(x249));
evalcond[6]=((((cj4)*(new_r11)))+(((IkReal(-0.819151867053070))*(x247)))+(x251));
evalcond[7]=((((IkReal(-1.00000000000000))*(x247)))+(((IkReal(0.573576689470092))*(new_r21)))+(((IkReal(0.819151867053070))*(x251)))+(((new_r11)*(x248))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x252=((IKabs(cj3) != 0)?((IkReal)1/(cj3)):(IkReal)1.0e30);
IkReal x253=((cj4)*(new_r00));
IkReal x254=((new_r10)*(sj4));
if( IKabs(((IkReal(1.75051999677897e-9))*(x252)*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(697378410.495633))*(cj3)*(new_r21)))+(((IkReal(400000000.000000))*(x254)))+(((IkReal(-400000000.000000))*(x253))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x252)*(((x253)+(((IkReal(-1.00000000000000))*(x254))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(1.75051999677897e-9))*(x252)*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(697378410.495633))*(cj3)*(new_r21)))+(((IkReal(400000000.000000))*(x254)))+(((IkReal(-400000000.000000))*(x253)))))))+IKsqr(((x252)*(((x253)+(((IkReal(-1.00000000000000))*(x254)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((IkReal(1.75051999677897e-9))*(x252)*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(697378410.495633))*(cj3)*(new_r21)))+(((IkReal(400000000.000000))*(x254)))+(((IkReal(-400000000.000000))*(x253)))))), ((x252)*(((x253)+(((IkReal(-1.00000000000000))*(x254)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[10];
IkReal x255=IKsin(j2);
IkReal x256=IKcos(j2);
IkReal x257=((IkReal(0.819151867053070))*(sj3));
IkReal x258=((IkReal(0.819151867053070))*(cj4));
IkReal x259=((cj4)*(new_r01));
IkReal x260=((IkReal(0.573576689470092))*(sj3));
IkReal x261=((new_r00)*(sj4));
IkReal x262=((cj4)*(new_r11));
IkReal x263=((IkReal(1.00000000000000))*(cj3));
IkReal x264=((new_r11)*(sj4));
IkReal x265=((cj4)*(new_r00));
IkReal x266=((new_r01)*(sj4));
IkReal x267=((cj4)*(new_r10));
IkReal x268=((IkReal(1.00000000000000))*(x256));
IkReal x269=((IkReal(1.00000000000000))*(new_r10)*(sj4));
evalcond[0]=((x265)+(((IkReal(-1.00000000000000))*(x269)))+(((IkReal(-1.00000000000000))*(x256)*(x263))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x255)*(x263)))+(((IkReal(-1.00000000000000))*(x264)))+(x259));
evalcond[2]=((((IkReal(-1.00000000000000))*(x256)*(x257)))+(((IkReal(0.573576689470092))*(x255)))+(new_r20));
evalcond[3]=((((IkReal(-1.00000000000000))*(x255)*(x257)))+(((IkReal(-0.573576689470092))*(x256)))+(new_r21));
evalcond[4]=((((IkReal(0.819151867053070))*(x261)))+(x255)+(((new_r10)*(x258)))+(((IkReal(0.573576689470092))*(new_r20))));
evalcond[5]=((x267)+(x261)+(((x256)*(x260)))+(((IkReal(0.819151867053070))*(x255))));
evalcond[6]=((x266)+(x262)+(((x255)*(x260)))+(((IkReal(-0.819151867053070))*(x256))));
evalcond[7]=((((IkReal(0.819151867053070))*(x266)))+(((new_r11)*(x258)))+(((IkReal(0.573576689470092))*(new_r21)))+(((IkReal(-1.00000000000000))*(x268))));
evalcond[8]=((((IkReal(-1.00000000000000))*(new_r10)*(sj4)*(x263)))+(((new_r20)*(x257)))+(((IkReal(-1.00000000000000))*(x268)))+(((cj3)*(x265)))+(((IkReal(-1.00000000000000))*(x260)*(x267)))+(((IkReal(-1.00000000000000))*(x260)*(x261))));
evalcond[9]=((((IkReal(-1.00000000000000))*(x263)*(x264)))+(((cj3)*(x259)))+(((new_r21)*(x257)))+(((IkReal(-1.00000000000000))*(x255)))+(((IkReal(-1.00000000000000))*(x260)*(x266)))+(((IkReal(-1.00000000000000))*(x260)*(x262))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x270=((IKabs(cj3) != 0)?((IkReal)1/(cj3)):(IkReal)1.0e30);
IkReal x271=((cj4)*(new_r00));
IkReal x272=((IkReal(571258827.000000))*(sj3));
IkReal x273=((new_r10)*(sj4));
if( IKabs(((IkReal(2.50000000000000e-9))*(x270)*(((((IkReal(-1.00000000000000))*(x272)*(x273)))+(((x271)*(x272)))+(((IkReal(-697378410.495633))*(cj3)*(new_r20))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x270)*(((((IkReal(-1.00000000000000))*(x273)))+(x271))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(2.50000000000000e-9))*(x270)*(((((IkReal(-1.00000000000000))*(x272)*(x273)))+(((x271)*(x272)))+(((IkReal(-697378410.495633))*(cj3)*(new_r20)))))))+IKsqr(((x270)*(((((IkReal(-1.00000000000000))*(x273)))+(x271)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((IkReal(2.50000000000000e-9))*(x270)*(((((IkReal(-1.00000000000000))*(x272)*(x273)))+(((x271)*(x272)))+(((IkReal(-697378410.495633))*(cj3)*(new_r20)))))), ((x270)*(((((IkReal(-1.00000000000000))*(x273)))+(x271)))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[10];
IkReal x274=IKsin(j2);
IkReal x275=IKcos(j2);
IkReal x276=((IkReal(0.819151867053070))*(sj3));
IkReal x277=((IkReal(0.819151867053070))*(cj4));
IkReal x278=((cj4)*(new_r01));
IkReal x279=((IkReal(0.573576689470092))*(sj3));
IkReal x280=((new_r00)*(sj4));
IkReal x281=((cj4)*(new_r11));
IkReal x282=((IkReal(1.00000000000000))*(cj3));
IkReal x283=((new_r11)*(sj4));
IkReal x284=((cj4)*(new_r00));
IkReal x285=((new_r01)*(sj4));
IkReal x286=((cj4)*(new_r10));
IkReal x287=((IkReal(1.00000000000000))*(x275));
IkReal x288=((IkReal(1.00000000000000))*(new_r10)*(sj4));
evalcond[0]=((x284)+(((IkReal(-1.00000000000000))*(x288)))+(((IkReal(-1.00000000000000))*(x275)*(x282))));
evalcond[1]=((x278)+(((IkReal(-1.00000000000000))*(x283)))+(((IkReal(-1.00000000000000))*(x274)*(x282))));
evalcond[2]=((((IkReal(0.573576689470092))*(x274)))+(((IkReal(-1.00000000000000))*(x275)*(x276)))+(new_r20));
evalcond[3]=((((IkReal(-1.00000000000000))*(x274)*(x276)))+(((IkReal(-0.573576689470092))*(x275)))+(new_r21));
evalcond[4]=((((IkReal(0.819151867053070))*(x280)))+(x274)+(((IkReal(0.573576689470092))*(new_r20)))+(((new_r10)*(x277))));
evalcond[5]=((((x275)*(x279)))+(((IkReal(0.819151867053070))*(x274)))+(x286)+(x280));
evalcond[6]=((((x274)*(x279)))+(((IkReal(-0.819151867053070))*(x275)))+(x285)+(x281));
evalcond[7]=((((IkReal(0.819151867053070))*(x285)))+(((IkReal(0.573576689470092))*(new_r21)))+(((IkReal(-1.00000000000000))*(x287)))+(((new_r11)*(x277))));
evalcond[8]=((((IkReal(-1.00000000000000))*(new_r10)*(sj4)*(x282)))+(((cj3)*(x284)))+(((new_r20)*(x276)))+(((IkReal(-1.00000000000000))*(x287)))+(((IkReal(-1.00000000000000))*(x279)*(x280)))+(((IkReal(-1.00000000000000))*(x279)*(x286))));
evalcond[9]=((((new_r21)*(x276)))+(((IkReal(-1.00000000000000))*(x274)))+(((IkReal(-1.00000000000000))*(x282)*(x283)))+(((IkReal(-1.00000000000000))*(x279)*(x281)))+(((IkReal(-1.00000000000000))*(x279)*(x285)))+(((cj3)*(x278))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x289=((IkReal(1.00000000000000))*(sj4));
if( IKabs(((gconst53)*(((((cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(x289))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst53)*(((((cj4)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(x289))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst53)*(((((cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(x289)))))), ((gconst53)*(((((cj4)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(x289)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[10];
IkReal x290=IKsin(j2);
IkReal x291=IKcos(j2);
IkReal x292=((IkReal(0.819151867053070))*(sj3));
IkReal x293=((IkReal(0.819151867053070))*(cj4));
IkReal x294=((cj4)*(new_r01));
IkReal x295=((IkReal(0.573576689470092))*(sj3));
IkReal x296=((new_r00)*(sj4));
IkReal x297=((cj4)*(new_r11));
IkReal x298=((IkReal(1.00000000000000))*(cj3));
IkReal x299=((new_r11)*(sj4));
IkReal x300=((cj4)*(new_r00));
IkReal x301=((new_r01)*(sj4));
IkReal x302=((cj4)*(new_r10));
IkReal x303=((IkReal(1.00000000000000))*(x291));
IkReal x304=((IkReal(1.00000000000000))*(new_r10)*(sj4));
evalcond[0]=((((IkReal(-1.00000000000000))*(x291)*(x298)))+(x300)+(((IkReal(-1.00000000000000))*(x304))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x299)))+(((IkReal(-1.00000000000000))*(x290)*(x298)))+(x294));
evalcond[2]=((((IkReal(-1.00000000000000))*(x291)*(x292)))+(new_r20)+(((IkReal(0.573576689470092))*(x290))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x290)*(x292)))+(((IkReal(-0.573576689470092))*(x291)))+(new_r21));
evalcond[4]=((((new_r10)*(x293)))+(x290)+(((IkReal(0.819151867053070))*(x296)))+(((IkReal(0.573576689470092))*(new_r20))));
evalcond[5]=((((x291)*(x295)))+(x302)+(x296)+(((IkReal(0.819151867053070))*(x290))));
evalcond[6]=((((IkReal(-0.819151867053070))*(x291)))+(((x290)*(x295)))+(x301)+(x297));
evalcond[7]=((((new_r11)*(x293)))+(((IkReal(0.819151867053070))*(x301)))+(((IkReal(0.573576689470092))*(new_r21)))+(((IkReal(-1.00000000000000))*(x303))));
evalcond[8]=((((new_r20)*(x292)))+(((IkReal(-1.00000000000000))*(x295)*(x302)))+(((cj3)*(x300)))+(((IkReal(-1.00000000000000))*(x295)*(x296)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj4)*(x298)))+(((IkReal(-1.00000000000000))*(x303))));
evalcond[9]=((((IkReal(-1.00000000000000))*(x290)))+(((cj3)*(x294)))+(((IkReal(-1.00000000000000))*(x295)*(x301)))+(((IkReal(-1.00000000000000))*(x298)*(x299)))+(((new_r21)*(x292)))+(((IkReal(-1.00000000000000))*(x295)*(x297))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x305=((IkReal(3.98383572754860e+17))*(sj3));
if( IKabs(((gconst50)*(((((new_r21)*(x305)))+(((IkReal(-2.78951364198253e+17))*(new_r20))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst50)*(((((IkReal(2.78951364198253e+17))*(new_r21)))+(((new_r20)*(x305))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst50)*(((((new_r21)*(x305)))+(((IkReal(-2.78951364198253e+17))*(new_r20)))))), ((gconst50)*(((((IkReal(2.78951364198253e+17))*(new_r21)))+(((new_r20)*(x305)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[2];
IkReal x306=IKcos(j2);
IkReal x307=IKsin(j2);
IkReal x308=((IkReal(0.819151867053070))*(sj3));
evalcond[0]=((((IkReal(-1.00000000000000))*(x306)*(x308)))+(new_r20)+(((IkReal(0.573576689470092))*(x307))));
evalcond[1]=((((IkReal(-0.573576689470092))*(x306)))+(((IkReal(-1.00000000000000))*(x307)*(x308)))+(new_r21));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst54;
gconst54=IKsign(((((new_r00)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r10)))));
dummyeval[0]=((((new_r00)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r10))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst55;
gconst55=IKsign(((((new_r01)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r11)))));
dummyeval[0]=((((new_r01)*(new_r12)))+(((IkReal(-1.00000000000000))*(new_r02)*(new_r11))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x309=((cj3)*(sj2));
if( IKabs(((gconst55)*(((((new_r01)*(sj3)))+(((new_r02)*(x309))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst55)*(((((new_r11)*(sj3)))+(((new_r12)*(x309))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst55)*(((((new_r01)*(sj3)))+(((new_r02)*(x309)))))), ((gconst55)*(((((new_r11)*(sj3)))+(((new_r12)*(x309)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[15];
IkReal x310=IKsin(j4);
IkReal x311=IKcos(j4);
IkReal x312=((IkReal(1.00000000000000))*(cj2));
IkReal x313=((IkReal(0.819151867053070))*(sj3));
IkReal x314=((new_r11)*(sj3));
IkReal x315=((IkReal(0.573576689470092))*(sj3));
IkReal x316=((IkReal(0.573576689470092))*(cj3));
IkReal x317=((IkReal(1.00000000000000))*(cj3));
IkReal x318=((IkReal(0.819151867053070))*(cj3));
IkReal x319=((new_r10)*(x311));
IkReal x320=((IkReal(1.00000000000000))*(x310));
IkReal x321=((new_r02)*(x311));
IkReal x322=((cj3)*(x311));
IkReal x323=((new_r02)*(x310));
IkReal x324=((new_r11)*(x311));
IkReal x325=((new_r00)*(x310));
IkReal x326=((new_r01)*(x310));
IkReal x327=((new_r12)*(x311));
IkReal x328=((new_r01)*(x311));
IkReal x329=((new_r00)*(x311));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r12)*(x320)))+(sj3)+(x321));
evalcond[1]=((x327)+(x323)+(x316));
evalcond[2]=((x329)+(((IkReal(-1.00000000000000))*(new_r10)*(x320)))+(((IkReal(-1.00000000000000))*(cj3)*(x312))));
evalcond[3]=((((IkReal(-1.00000000000000))*(sj2)*(x317)))+(x328)+(((IkReal(-1.00000000000000))*(new_r11)*(x320))));
evalcond[4]=((((IkReal(0.573576689470092))*(new_r22)))+(((IkReal(0.819151867053070))*(x327)))+(((IkReal(0.819151867053070))*(x323))));
evalcond[5]=((sj2)+(((IkReal(0.819151867053070))*(x319)))+(((IkReal(0.573576689470092))*(new_r20)))+(((IkReal(0.819151867053070))*(x325))));
evalcond[6]=((((IkReal(0.819151867053070))*(sj2)))+(x325)+(x319)+(((cj2)*(x315))));
evalcond[7]=((((IkReal(-0.819151867053070))*(cj2)))+(x324)+(x326)+(((sj2)*(x315))));
evalcond[8]=((((IkReal(-1.00000000000000))*(x312)))+(((IkReal(0.573576689470092))*(new_r21)))+(((IkReal(0.819151867053070))*(x324)))+(((IkReal(0.819151867053070))*(x326))));
evalcond[9]=((((IkReal(-1.00000000000000))*(x315)*(x323)))+(((IkReal(-1.00000000000000))*(x315)*(x327)))+(((new_r22)*(x313)))+(((IkReal(-1.00000000000000))*(new_r12)*(x310)*(x317)))+(((cj3)*(x321))));
evalcond[10]=((((IkReal(-1.00000000000000))*(new_r20)*(x318)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj3)*(x320)))+(((sj3)*(x329)))+(((x316)*(x325)))+(((x316)*(x319))));
evalcond[11]=((((IkReal(-1.00000000000000))*(new_r21)*(x318)))+(((IkReal(-1.00000000000000))*(x314)*(x320)))+(((sj3)*(x328)))+(((x316)*(x326)))+(((x316)*(x324))));
evalcond[12]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22)*(x318)))+(((sj3)*(x321)))+(((IkReal(-1.00000000000000))*(new_r12)*(sj3)*(x320)))+(((x316)*(x323)))+(((x316)*(x327))));
evalcond[13]=((((new_r00)*(x322)))+(((new_r20)*(x313)))+(((IkReal(-1.00000000000000))*(x315)*(x325)))+(((IkReal(-1.00000000000000))*(x312)))+(((IkReal(-1.00000000000000))*(new_r10)*(x310)*(x317)))+(((IkReal(-1.00000000000000))*(x315)*(x319))));
evalcond[14]=((((new_r01)*(x322)))+(((IkReal(-1.00000000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(x315)*(x326)))+(((IkReal(-1.00000000000000))*(new_r11)*(x310)*(x317)))+(((IkReal(-0.573576689470092))*(x311)*(x314)))+(((new_r21)*(x313))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  || IKabs(evalcond[12]) > 0.000001  || IKabs(evalcond[13]) > 0.000001  || IKabs(evalcond[14]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x330=((cj2)*(cj3));
if( IKabs(((gconst54)*(((((new_r02)*(x330)))+(((new_r00)*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst54)*(((((new_r10)*(sj3)))+(((new_r12)*(x330))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst54)*(((((new_r02)*(x330)))+(((new_r00)*(sj3)))))), ((gconst54)*(((((new_r10)*(sj3)))+(((new_r12)*(x330)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[15];
IkReal x331=IKsin(j4);
IkReal x332=IKcos(j4);
IkReal x333=((IkReal(1.00000000000000))*(cj2));
IkReal x334=((IkReal(0.819151867053070))*(sj3));
IkReal x335=((new_r11)*(sj3));
IkReal x336=((IkReal(0.573576689470092))*(sj3));
IkReal x337=((IkReal(0.573576689470092))*(cj3));
IkReal x338=((IkReal(1.00000000000000))*(cj3));
IkReal x339=((IkReal(0.819151867053070))*(cj3));
IkReal x340=((new_r10)*(x332));
IkReal x341=((IkReal(1.00000000000000))*(x331));
IkReal x342=((new_r02)*(x332));
IkReal x343=((cj3)*(x332));
IkReal x344=((new_r02)*(x331));
IkReal x345=((new_r11)*(x332));
IkReal x346=((new_r00)*(x331));
IkReal x347=((new_r01)*(x331));
IkReal x348=((new_r12)*(x332));
IkReal x349=((new_r01)*(x332));
IkReal x350=((new_r00)*(x332));
evalcond[0]=((sj3)+(((IkReal(-1.00000000000000))*(new_r12)*(x341)))+(x342));
evalcond[1]=((x337)+(x344)+(x348));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r10)*(x341)))+(x350)+(((IkReal(-1.00000000000000))*(cj3)*(x333))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r11)*(x341)))+(((IkReal(-1.00000000000000))*(sj2)*(x338)))+(x349));
evalcond[4]=((((IkReal(0.819151867053070))*(x344)))+(((IkReal(0.819151867053070))*(x348)))+(((IkReal(0.573576689470092))*(new_r22))));
evalcond[5]=((sj2)+(((IkReal(0.819151867053070))*(x340)))+(((IkReal(0.819151867053070))*(x346)))+(((IkReal(0.573576689470092))*(new_r20))));
evalcond[6]=((((cj2)*(x336)))+(((IkReal(0.819151867053070))*(sj2)))+(x340)+(x346));
evalcond[7]=((((sj2)*(x336)))+(((IkReal(-0.819151867053070))*(cj2)))+(x347)+(x345));
evalcond[8]=((((IkReal(0.819151867053070))*(x347)))+(((IkReal(0.819151867053070))*(x345)))+(((IkReal(-1.00000000000000))*(x333)))+(((IkReal(0.573576689470092))*(new_r21))));
evalcond[9]=((((IkReal(-1.00000000000000))*(new_r12)*(x331)*(x338)))+(((IkReal(-1.00000000000000))*(x336)*(x348)))+(((IkReal(-1.00000000000000))*(x336)*(x344)))+(((new_r22)*(x334)))+(((cj3)*(x342))));
evalcond[10]=((((x337)*(x346)))+(((x337)*(x340)))+(((IkReal(-1.00000000000000))*(new_r20)*(x339)))+(((sj3)*(x350)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj3)*(x341))));
evalcond[11]=((((IkReal(-1.00000000000000))*(x335)*(x341)))+(((x337)*(x345)))+(((x337)*(x347)))+(((sj3)*(x349)))+(((IkReal(-1.00000000000000))*(new_r21)*(x339))));
evalcond[12]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22)*(x339)))+(((x337)*(x344)))+(((x337)*(x348)))+(((sj3)*(x342)))+(((IkReal(-1.00000000000000))*(new_r12)*(sj3)*(x341))));
evalcond[13]=((((IkReal(-1.00000000000000))*(x336)*(x346)))+(((IkReal(-1.00000000000000))*(x336)*(x340)))+(((new_r00)*(x343)))+(((IkReal(-1.00000000000000))*(new_r10)*(x331)*(x338)))+(((IkReal(-1.00000000000000))*(x333)))+(((new_r20)*(x334))));
evalcond[14]=((((new_r21)*(x334)))+(((IkReal(-1.00000000000000))*(sj2)))+(((IkReal(-1.00000000000000))*(x336)*(x347)))+(((new_r01)*(x343)))+(((IkReal(-1.00000000000000))*(new_r11)*(x331)*(x338)))+(((IkReal(-0.573576689470092))*(x332)*(x335))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  || IKabs(evalcond[12]) > 0.000001  || IKabs(evalcond[13]) > 0.000001  || IKabs(evalcond[14]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x351=((IkReal(571258827.000000))*(sj3));
IkReal x352=((IkReal(400000000.000000))*(new_r22));
if( IKabs(((gconst52)*(((((IkReal(-1.00000000000000))*(new_r02)*(x352)))+(((new_r12)*(x351))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst52)*(((((IkReal(-1.00000000000000))*(new_r12)*(x352)))+(((IkReal(-1.00000000000000))*(new_r02)*(x351))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst52)*(((((IkReal(-1.00000000000000))*(new_r02)*(x352)))+(((new_r12)*(x351)))))), ((gconst52)*(((((IkReal(-1.00000000000000))*(new_r12)*(x352)))+(((IkReal(-1.00000000000000))*(new_r02)*(x351)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[7];
IkReal x353=IKsin(j4);
IkReal x354=IKcos(j4);
IkReal x355=((cj3)*(new_r12));
IkReal x356=((IkReal(0.573576689470092))*(cj3));
IkReal x357=((new_r12)*(sj3));
IkReal x358=((IkReal(0.819151867053070))*(new_r22));
IkReal x359=((IkReal(0.819151867053070))*(cj3));
IkReal x360=((IkReal(1.00000000000000))*(x353));
IkReal x361=((new_r02)*(x354));
IkReal x362=((new_r02)*(x353));
IkReal x363=((sj3)*(x354));
IkReal x364=((new_r12)*(x354));
IkReal x365=((IkReal(0.573576689470092))*(x354));
evalcond[0]=((sj3)+(((IkReal(-1.00000000000000))*(new_r12)*(x360)))+(x361));
evalcond[1]=((x356)+(x362)+(x364));
evalcond[2]=((((IkReal(0.573576689470092))*(new_r22)))+(((IkReal(0.819151867053070))*(x362)))+(((IkReal(0.819151867053070))*(x364))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x355)*(x360)))+(((IkReal(-0.573576689470092))*(sj3)*(x362)))+(((sj3)*(x358)))+(((IkReal(-1.00000000000000))*(x357)*(x365)))+(((cj3)*(x361))));
evalcond[4]=((((new_r00)*(x353)*(x356)))+(((new_r00)*(x363)))+(((new_r10)*(x354)*(x356)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj3)*(x360)))+(((IkReal(-1.00000000000000))*(new_r20)*(x359))));
evalcond[5]=((((new_r11)*(x354)*(x356)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj3)*(x360)))+(((new_r01)*(x363)))+(((IkReal(-1.00000000000000))*(new_r21)*(x359)))+(((new_r01)*(x353)*(x356))));
evalcond[6]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(cj3)*(x358)))+(((x355)*(x365)))+(((x356)*(x362)))+(((sj3)*(x361)))+(((IkReal(-1.00000000000000))*(x357)*(x360))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst53;
gconst53=IKsign(cj3);
dummyeval[0]=cj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj3;
dummyeval[1]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
IkReal x366=((IkReal(1.00000000000000))*(sj4));
IkReal x367=((new_r02)*(sj4));
IkReal x368=((cj4)*(new_r12));
IkReal x369=((((cj4)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(x366))));
IkReal x370=((((cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(x366))));
IkReal x371=((IkReal(1.00000000000000))+(((cj4)*(new_r02)))+(((IkReal(-1.00000000000000))*(new_r12)*(x366))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=x371;
evalcond[3]=((x368)+(x367));
evalcond[4]=x369;
evalcond[5]=x370;
evalcond[6]=((((IkReal(0.573576689470092))*(new_r22)))+(((IkReal(0.819151867053070))*(x368)))+(((IkReal(0.819151867053070))*(x367))));
evalcond[7]=((((IkReal(0.819151867053070))*(new_r22)))+(((IkReal(-0.573576689470092))*(x367)))+(((IkReal(-0.573576689470092))*(x368))));
evalcond[8]=x369;
evalcond[9]=x370;
evalcond[10]=x371;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((((IkReal(-0.573576689470092))*(new_r20)))+(((IkReal(0.819151867053070))*(new_r21))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(0.819151867053070))*(new_r20)))+(((IkReal(0.573576689470092))*(new_r21))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-0.573576689470092))*(new_r20)))+(((IkReal(0.819151867053070))*(new_r21)))))+IKsqr(((((IkReal(0.819151867053070))*(new_r20)))+(((IkReal(0.573576689470092))*(new_r21)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((IkReal(-0.573576689470092))*(new_r20)))+(((IkReal(0.819151867053070))*(new_r21)))), ((((IkReal(0.819151867053070))*(new_r20)))+(((IkReal(0.573576689470092))*(new_r21)))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x372=IKcos(j2);
IkReal x373=IKsin(j2);
IkReal x374=((cj4)*(new_r11));
IkReal x375=((cj4)*(new_r10));
IkReal x376=((new_r01)*(sj4));
IkReal x377=((new_r00)*(sj4));
IkReal x378=((IkReal(0.573576689470092))*(x372));
IkReal x379=((IkReal(0.819151867053070))*(x373));
IkReal x380=((IkReal(0.573576689470092))*(x373));
IkReal x381=((IkReal(0.819151867053070))*(x372));
IkReal x382=((IkReal(1.00000000000000))*(x372));
IkReal x383=((x379)+(x378));
evalcond[0]=((x380)+(((IkReal(-1.00000000000000))*(x381)))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x383)))+(new_r21));
evalcond[2]=((x373)+(((IkReal(0.573576689470092))*(new_r20)))+(((IkReal(0.819151867053070))*(x375)))+(((IkReal(0.819151867053070))*(x377))));
evalcond[3]=((x383)+(x377)+(x375));
evalcond[4]=((x380)+(x376)+(x374)+(((IkReal(-1.00000000000000))*(x381))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x382)))+(((IkReal(0.573576689470092))*(new_r21)))+(((IkReal(0.819151867053070))*(x376)))+(((IkReal(0.819151867053070))*(x374))));
evalcond[6]=((((IkReal(0.819151867053070))*(new_r20)))+(((IkReal(-1.00000000000000))*(x382)))+(((IkReal(-0.573576689470092))*(x375)))+(((IkReal(-0.573576689470092))*(x377))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x373)))+(((IkReal(0.819151867053070))*(new_r21)))+(((IkReal(-0.573576689470092))*(x376)))+(((IkReal(-0.573576689470092))*(x374))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x384=((cj4)*(new_r00));
IkReal x385=((cj4)*(new_r01));
IkReal x386=((cj4)*(new_r02));
IkReal x387=((IkReal(1.00000000000000))*(sj4));
IkReal x388=((new_r02)*(sj4));
IkReal x389=((cj4)*(new_r12));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=new_r22;
evalcond[2]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r12)*(x387)))+(x386));
evalcond[3]=((x388)+(x389));
evalcond[4]=((((IkReal(-1.00000000000000))*(new_r10)*(x387)))+(x384));
evalcond[5]=((((IkReal(-1.00000000000000))*(new_r11)*(x387)))+(x385));
evalcond[6]=((((IkReal(0.819151867053070))*(x389)))+(((IkReal(0.819151867053070))*(x388)))+(((IkReal(0.573576689470092))*(new_r22))));
evalcond[7]=((((IkReal(-0.819151867053070))*(new_r22)))+(((IkReal(0.573576689470092))*(x388)))+(((IkReal(0.573576689470092))*(x389))));
evalcond[8]=((((new_r10)*(sj4)))+(((IkReal(-1.00000000000000))*(x384))));
evalcond[9]=((((new_r11)*(sj4)))+(((IkReal(-1.00000000000000))*(x385))));
evalcond[10]=((IkReal(1.00000000000000))+(((new_r12)*(sj4)))+(((IkReal(-1.00000000000000))*(x386))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((((IkReal(-0.573576689470092))*(new_r20)))+(((IkReal(-0.819151867053070))*(new_r21))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-0.819151867053070))*(new_r20)))+(((IkReal(0.573576689470092))*(new_r21))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-0.573576689470092))*(new_r20)))+(((IkReal(-0.819151867053070))*(new_r21)))))+IKsqr(((((IkReal(-0.819151867053070))*(new_r20)))+(((IkReal(0.573576689470092))*(new_r21)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((IkReal(-0.573576689470092))*(new_r20)))+(((IkReal(-0.819151867053070))*(new_r21)))), ((((IkReal(-0.819151867053070))*(new_r20)))+(((IkReal(0.573576689470092))*(new_r21)))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x390=IKsin(j2);
IkReal x391=IKcos(j2);
IkReal x392=((cj4)*(new_r11));
IkReal x393=((cj4)*(new_r10));
IkReal x394=((new_r01)*(sj4));
IkReal x395=((new_r00)*(sj4));
IkReal x396=((IkReal(0.819151867053070))*(x390));
IkReal x397=((IkReal(0.573576689470092))*(x391));
IkReal x398=((IkReal(0.819151867053070))*(x391));
IkReal x399=((IkReal(0.573576689470092))*(x390));
IkReal x400=((IkReal(1.00000000000000))*(x391));
IkReal x401=((x399)+(x398));
evalcond[0]=((x401)+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(x397)))+(x396)+(new_r21));
evalcond[2]=((((IkReal(0.819151867053070))*(x395)))+(((IkReal(0.819151867053070))*(x393)))+(x390)+(((IkReal(0.573576689470092))*(new_r20))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x397)))+(x395)+(x396)+(x393));
evalcond[4]=((x394)+(x392)+(((IkReal(-1.00000000000000))*(x401))));
evalcond[5]=((((IkReal(0.819151867053070))*(x394)))+(((IkReal(0.819151867053070))*(x392)))+(((IkReal(0.573576689470092))*(new_r21)))+(((IkReal(-1.00000000000000))*(x400))));
evalcond[6]=((((IkReal(0.573576689470092))*(x393)))+(((IkReal(0.573576689470092))*(x395)))+(((IkReal(-0.819151867053070))*(new_r20)))+(((IkReal(-1.00000000000000))*(x400))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x390)))+(((IkReal(0.573576689470092))*(x392)))+(((IkReal(0.573576689470092))*(x394)))+(((IkReal(-0.819151867053070))*(new_r21))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x402=((IkReal(0.573576689470092))*(cj4));
IkReal x403=((IkReal(0.573576689470092))*(sj4));
IkReal x404=((new_r02)*(sj4));
IkReal x405=((cj4)*(new_r12));
IkReal x406=((((cj4)*(new_r02)))+(((IkReal(-1.00000000000000))*(new_r12)*(sj4))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.819151867053070))+(new_r22));
evalcond[2]=x406;
evalcond[3]=((IkReal(0.573576689470092))+(x405)+(x404));
evalcond[4]=((((IkReal(0.573576689470092))*(new_r22)))+(((IkReal(0.819151867053070))*(x405)))+(((IkReal(0.819151867053070))*(x404))));
evalcond[5]=x406;
evalcond[6]=((((IkReal(-0.819151867053070))*(new_r20)))+(((new_r10)*(x402)))+(((new_r00)*(x403))));
evalcond[7]=((((IkReal(-0.819151867053070))*(new_r21)))+(((new_r11)*(x402)))+(((new_r01)*(x403))));
evalcond[8]=((IkReal(1.00000000000000))+(((IkReal(-0.819151867053070))*(new_r22)))+(((new_r12)*(x402)))+(((new_r02)*(x403))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((IkReal(-1.74344602623908))*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(1.74344602623908))*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.74344602623908))*(new_r20)))+IKsqr(((IkReal(1.74344602623908))*(new_r21)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((IkReal(-1.74344602623908))*(new_r20)), ((IkReal(1.74344602623908))*(new_r21)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x407=IKsin(j2);
IkReal x408=IKcos(j2);
IkReal x409=((cj4)*(new_r10));
IkReal x410=((cj4)*(new_r11));
IkReal x411=((new_r00)*(sj4));
IkReal x412=((IkReal(1.00000000000000))*(sj4));
IkReal x413=((new_r01)*(sj4));
IkReal x414=((IkReal(1.00000000000000))*(x408));
evalcond[0]=((((cj4)*(new_r00)))+(((IkReal(-1.00000000000000))*(x414)))+(((IkReal(-1.00000000000000))*(new_r10)*(x412))));
evalcond[1]=((((cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(x412)))+(((IkReal(-1.00000000000000))*(x407))));
evalcond[2]=((((IkReal(0.573576689470092))*(x407)))+(new_r20));
evalcond[3]=((((IkReal(-0.573576689470092))*(x408)))+(new_r21));
evalcond[4]=((x407)+(((IkReal(0.819151867053070))*(x411)))+(((IkReal(0.573576689470092))*(new_r20)))+(((IkReal(0.819151867053070))*(x409))));
evalcond[5]=((x409)+(x411)+(((IkReal(0.819151867053070))*(x407))));
evalcond[6]=((((IkReal(-0.819151867053070))*(x408)))+(x413)+(x410));
evalcond[7]=((((IkReal(0.819151867053070))*(x413)))+(((IkReal(0.819151867053070))*(x410)))+(((IkReal(0.573576689470092))*(new_r21)))+(((IkReal(-1.00000000000000))*(x414))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x415=((IkReal(0.573576689470092))*(cj4));
IkReal x416=((cj4)*(new_r02));
IkReal x417=((new_r12)*(sj4));
IkReal x418=((IkReal(0.573576689470092))*(sj4));
IkReal x419=((new_r02)*(sj4));
IkReal x420=((cj4)*(new_r12));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.819151867053070))+(new_r22));
evalcond[2]=((x416)+(((IkReal(-1.00000000000000))*(x417))));
evalcond[3]=((IkReal(-0.573576689470092))+(x419)+(x420));
evalcond[4]=((((IkReal(0.819151867053070))*(x420)))+(((IkReal(0.819151867053070))*(x419)))+(((IkReal(0.573576689470092))*(new_r22))));
evalcond[5]=((x417)+(((IkReal(-1.00000000000000))*(x416))));
evalcond[6]=((((IkReal(0.819151867053070))*(new_r20)))+(((IkReal(-1.00000000000000))*(new_r00)*(x418)))+(((IkReal(-1.00000000000000))*(new_r10)*(x415))));
evalcond[7]=((((IkReal(0.819151867053070))*(new_r21)))+(((IkReal(-1.00000000000000))*(new_r11)*(x415)))+(((IkReal(-1.00000000000000))*(new_r01)*(x418))));
evalcond[8]=((IkReal(1.00000000000000))+(((IkReal(0.819151867053070))*(new_r22)))+(((IkReal(-1.00000000000000))*(new_r12)*(x415)))+(((IkReal(-1.00000000000000))*(new_r02)*(x418))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((IkReal(-1.74344602623908))*(new_r20))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(1.74344602623908))*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.74344602623908))*(new_r20)))+IKsqr(((IkReal(1.74344602623908))*(new_r21)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((IkReal(-1.74344602623908))*(new_r20)), ((IkReal(1.74344602623908))*(new_r21)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x421=IKsin(j2);
IkReal x422=IKcos(j2);
IkReal x423=((IkReal(0.819151867053070))*(cj4));
IkReal x424=((new_r00)*(sj4));
IkReal x425=((IkReal(1.00000000000000))*(sj4));
IkReal x426=((new_r01)*(sj4));
evalcond[0]=((((cj4)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(x425)))+(x422));
evalcond[1]=((((cj4)*(new_r01)))+(x421)+(((IkReal(-1.00000000000000))*(new_r11)*(x425))));
evalcond[2]=((((IkReal(0.573576689470092))*(x421)))+(new_r20));
evalcond[3]=((new_r21)+(((IkReal(-0.573576689470092))*(x422))));
evalcond[4]=((((new_r10)*(x423)))+(((IkReal(0.819151867053070))*(x424)))+(x421)+(((IkReal(0.573576689470092))*(new_r20))));
evalcond[5]=((((cj4)*(new_r10)))+(((IkReal(0.819151867053070))*(x421)))+(x424));
evalcond[6]=((((cj4)*(new_r11)))+(x426)+(((IkReal(-0.819151867053070))*(x422))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x422)))+(((new_r11)*(x423)))+(((IkReal(0.819151867053070))*(x426)))+(((IkReal(0.573576689470092))*(new_r21))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x427=((IKabs(cj3) != 0)?((IkReal)1/(cj3)):(IkReal)1.0e30);
IkReal x428=((cj4)*(new_r00));
IkReal x429=((new_r10)*(sj4));
if( IKabs(((IkReal(1.75051999677897e-9))*(x427)*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(697378410.495633))*(cj3)*(new_r21)))+(((IkReal(-400000000.000000))*(x428)))+(((IkReal(400000000.000000))*(x429))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x427)*(((((IkReal(-1.00000000000000))*(x429)))+(x428))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(1.75051999677897e-9))*(x427)*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(697378410.495633))*(cj3)*(new_r21)))+(((IkReal(-400000000.000000))*(x428)))+(((IkReal(400000000.000000))*(x429)))))))+IKsqr(((x427)*(((((IkReal(-1.00000000000000))*(x429)))+(x428)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((IkReal(1.75051999677897e-9))*(x427)*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(697378410.495633))*(cj3)*(new_r21)))+(((IkReal(-400000000.000000))*(x428)))+(((IkReal(400000000.000000))*(x429)))))), ((x427)*(((((IkReal(-1.00000000000000))*(x429)))+(x428)))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[10];
IkReal x430=IKsin(j2);
IkReal x431=IKcos(j2);
IkReal x432=((IkReal(0.819151867053070))*(sj3));
IkReal x433=((IkReal(0.819151867053070))*(cj4));
IkReal x434=((cj4)*(new_r01));
IkReal x435=((IkReal(0.573576689470092))*(sj3));
IkReal x436=((new_r00)*(sj4));
IkReal x437=((cj4)*(new_r11));
IkReal x438=((IkReal(1.00000000000000))*(cj3));
IkReal x439=((new_r11)*(sj4));
IkReal x440=((cj4)*(new_r00));
IkReal x441=((new_r01)*(sj4));
IkReal x442=((cj4)*(new_r10));
IkReal x443=((IkReal(1.00000000000000))*(x431));
IkReal x444=((IkReal(1.00000000000000))*(new_r10)*(sj4));
evalcond[0]=((((IkReal(-1.00000000000000))*(x444)))+(((IkReal(-1.00000000000000))*(x431)*(x438)))+(x440));
evalcond[1]=((((IkReal(-1.00000000000000))*(x430)*(x438)))+(((IkReal(-1.00000000000000))*(x439)))+(x434));
evalcond[2]=((((IkReal(-1.00000000000000))*(x431)*(x432)))+(((IkReal(0.573576689470092))*(x430)))+(new_r20));
evalcond[3]=((((IkReal(-1.00000000000000))*(x430)*(x432)))+(new_r21)+(((IkReal(-0.573576689470092))*(x431))));
evalcond[4]=((((new_r10)*(x433)))+(x430)+(((IkReal(0.819151867053070))*(x436)))+(((IkReal(0.573576689470092))*(new_r20))));
evalcond[5]=((x436)+(x442)+(((IkReal(0.819151867053070))*(x430)))+(((x431)*(x435))));
evalcond[6]=((x437)+(x441)+(((IkReal(-0.819151867053070))*(x431)))+(((x430)*(x435))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x443)))+(((IkReal(0.819151867053070))*(x441)))+(((new_r11)*(x433)))+(((IkReal(0.573576689470092))*(new_r21))));
evalcond[8]=((((IkReal(-1.00000000000000))*(x443)))+(((IkReal(-1.00000000000000))*(x435)*(x436)))+(((IkReal(-1.00000000000000))*(x435)*(x442)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj4)*(x438)))+(((new_r20)*(x432)))+(((cj3)*(x440))));
evalcond[9]=((((IkReal(-1.00000000000000))*(x430)))+(((new_r21)*(x432)))+(((IkReal(-1.00000000000000))*(x435)*(x437)))+(((IkReal(-1.00000000000000))*(x438)*(x439)))+(((IkReal(-1.00000000000000))*(x435)*(x441)))+(((cj3)*(x434))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x445=((IKabs(cj3) != 0)?((IkReal)1/(cj3)):(IkReal)1.0e30);
IkReal x446=((cj4)*(new_r00));
IkReal x447=((IkReal(571258827.000000))*(sj3));
IkReal x448=((new_r10)*(sj4));
if( IKabs(((IkReal(2.50000000000000e-9))*(x445)*(((((x446)*(x447)))+(((IkReal(-697378410.495633))*(cj3)*(new_r20)))+(((IkReal(-1.00000000000000))*(x447)*(x448))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x445)*(((((IkReal(-1.00000000000000))*(x448)))+(x446))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(2.50000000000000e-9))*(x445)*(((((x446)*(x447)))+(((IkReal(-697378410.495633))*(cj3)*(new_r20)))+(((IkReal(-1.00000000000000))*(x447)*(x448)))))))+IKsqr(((x445)*(((((IkReal(-1.00000000000000))*(x448)))+(x446)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((IkReal(2.50000000000000e-9))*(x445)*(((((x446)*(x447)))+(((IkReal(-697378410.495633))*(cj3)*(new_r20)))+(((IkReal(-1.00000000000000))*(x447)*(x448)))))), ((x445)*(((((IkReal(-1.00000000000000))*(x448)))+(x446)))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[10];
IkReal x449=IKsin(j2);
IkReal x450=IKcos(j2);
IkReal x451=((IkReal(0.819151867053070))*(sj3));
IkReal x452=((IkReal(0.819151867053070))*(cj4));
IkReal x453=((cj4)*(new_r01));
IkReal x454=((IkReal(0.573576689470092))*(sj3));
IkReal x455=((new_r00)*(sj4));
IkReal x456=((cj4)*(new_r11));
IkReal x457=((IkReal(1.00000000000000))*(cj3));
IkReal x458=((new_r11)*(sj4));
IkReal x459=((cj4)*(new_r00));
IkReal x460=((new_r01)*(sj4));
IkReal x461=((cj4)*(new_r10));
IkReal x462=((IkReal(1.00000000000000))*(x450));
IkReal x463=((IkReal(1.00000000000000))*(new_r10)*(sj4));
evalcond[0]=((((IkReal(-1.00000000000000))*(x463)))+(x459)+(((IkReal(-1.00000000000000))*(x450)*(x457))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x458)))+(x453)+(((IkReal(-1.00000000000000))*(x449)*(x457))));
evalcond[2]=((((IkReal(0.573576689470092))*(x449)))+(((IkReal(-1.00000000000000))*(x450)*(x451)))+(new_r20));
evalcond[3]=((((IkReal(-0.573576689470092))*(x450)))+(new_r21)+(((IkReal(-1.00000000000000))*(x449)*(x451))));
evalcond[4]=((((new_r10)*(x452)))+(((IkReal(0.819151867053070))*(x455)))+(x449)+(((IkReal(0.573576689470092))*(new_r20))));
evalcond[5]=((((IkReal(0.819151867053070))*(x449)))+(x455)+(x461)+(((x450)*(x454))));
evalcond[6]=((((IkReal(-0.819151867053070))*(x450)))+(x456)+(x460)+(((x449)*(x454))));
evalcond[7]=((((new_r11)*(x452)))+(((IkReal(0.819151867053070))*(x460)))+(((IkReal(-1.00000000000000))*(x462)))+(((IkReal(0.573576689470092))*(new_r21))));
evalcond[8]=((((new_r20)*(x451)))+(((IkReal(-1.00000000000000))*(x454)*(x461)))+(((IkReal(-1.00000000000000))*(x462)))+(((cj3)*(x459)))+(((IkReal(-1.00000000000000))*(x454)*(x455)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj4)*(x457))));
evalcond[9]=((((IkReal(-1.00000000000000))*(x449)))+(((IkReal(-1.00000000000000))*(x454)*(x460)))+(((cj3)*(x453)))+(((IkReal(-1.00000000000000))*(x454)*(x456)))+(((new_r21)*(x451)))+(((IkReal(-1.00000000000000))*(x457)*(x458))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x464=((IkReal(1.00000000000000))*(sj4));
if( IKabs(((gconst53)*(((((cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(x464))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst53)*(((((cj4)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(x464))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst53)*(((((cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(x464)))))), ((gconst53)*(((((cj4)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(x464)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[10];
IkReal x465=IKsin(j2);
IkReal x466=IKcos(j2);
IkReal x467=((IkReal(0.819151867053070))*(sj3));
IkReal x468=((IkReal(0.819151867053070))*(cj4));
IkReal x469=((cj4)*(new_r01));
IkReal x470=((IkReal(0.573576689470092))*(sj3));
IkReal x471=((new_r00)*(sj4));
IkReal x472=((cj4)*(new_r11));
IkReal x473=((IkReal(1.00000000000000))*(cj3));
IkReal x474=((new_r11)*(sj4));
IkReal x475=((cj4)*(new_r00));
IkReal x476=((new_r01)*(sj4));
IkReal x477=((cj4)*(new_r10));
IkReal x478=((IkReal(1.00000000000000))*(x466));
IkReal x479=((IkReal(1.00000000000000))*(new_r10)*(sj4));
evalcond[0]=((((IkReal(-1.00000000000000))*(x479)))+(x475)+(((IkReal(-1.00000000000000))*(x466)*(x473))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x474)))+(x469)+(((IkReal(-1.00000000000000))*(x465)*(x473))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x466)*(x467)))+(((IkReal(0.573576689470092))*(x465)))+(new_r20));
evalcond[3]=((((IkReal(-1.00000000000000))*(x465)*(x467)))+(((IkReal(-0.573576689470092))*(x466)))+(new_r21));
evalcond[4]=((((new_r10)*(x468)))+(((IkReal(0.819151867053070))*(x471)))+(x465)+(((IkReal(0.573576689470092))*(new_r20))));
evalcond[5]=((((IkReal(0.819151867053070))*(x465)))+(((x466)*(x470)))+(x477)+(x471));
evalcond[6]=((((x465)*(x470)))+(x476)+(x472)+(((IkReal(-0.819151867053070))*(x466))));
evalcond[7]=((((new_r11)*(x468)))+(((IkReal(-1.00000000000000))*(x478)))+(((IkReal(0.819151867053070))*(x476)))+(((IkReal(0.573576689470092))*(new_r21))));
evalcond[8]=((((new_r20)*(x467)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj4)*(x473)))+(((cj3)*(x475)))+(((IkReal(-1.00000000000000))*(x478)))+(((IkReal(-1.00000000000000))*(x470)*(x477)))+(((IkReal(-1.00000000000000))*(x470)*(x471))));
evalcond[9]=((((IkReal(-1.00000000000000))*(x465)))+(((IkReal(-1.00000000000000))*(x473)*(x474)))+(((cj3)*(x469)))+(((new_r21)*(x467)))+(((IkReal(-1.00000000000000))*(x470)*(x476)))+(((IkReal(-1.00000000000000))*(x470)*(x472))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:genericrobot - jaco (0d125393294b9c251ef6aa3ae79e27b3)>"; }

IKFAST_API const char* GetIkFastVersion() { return IKFAST_STRINGIZE(IKFAST_VERSION); }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
